package com.example.mobileforensics;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.protocol.HTTP;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.view.View;
import android.view.View.OnClickListener;
import android.widget.AdapterView;
import android.widget.TextView;
import android.widget.Toast;
import android.widget.AdapterView.OnItemSelectedListener;

public interface GlobalMethods {
	public abstract void setOnClickEvents();
	
	private void showHideButtons();
	
	public void hidePage(){
		try{
			//if not first page disable
			if(pageCount != 1)
			{
				infoLayout.setVisibility(GONE);

			}

			//if not second page disable
			if(pageCount != 2){


				demographicsLayout.setVisibility(GONE);
			}

			//if not third page disable
			if(pageCount != 3){
				theBodyLayout.setVisibility(GONE);
			}

			//if not fourth page disable
			if(pageCount != 4){
				sceneOfInjuryLayout.setVisibility(GONE);
			}

			//if not fifth page disable
			if(pageCount != 5){
				theSceneLayout.setVisibility(GONE);
			}
			
			if(pageCount != 6){
				galleryLayout.setVisibility(GONE);
			}
		}catch(Exception e){e.printStackTrace();}
	}

	public void showPage(){
		try{
			//if fist page show
			if(pageCount == 1)
			{
				infoLayout.setVisibility(VISIBLE);

			}

			//if second page show
			if(pageCount == 2){

				demographicsLayout.setVisibility(VISIBLE);
			}

			//if third page show
			if(pageCount == 3){

				theBodyLayout.setVisibility(VISIBLE);
			}


			//if fourth page show
			if(pageCount == 4){
				sceneOfInjuryLayout.setVisibility(VISIBLE);

			}
			
			//if fifth page show
			if(pageCount == 5){
				theSceneLayout.setVisibility(VISIBLE);

			}
			
			//if sixth page show
			if(pageCount == 6){
				galleryLayout.setVisibility(VISIBLE);

			}
		}catch(Exception e){e.printStackTrace();}
	}


	public boolean validateNextPage(){
		try{
			switch(pageCount)
			{
				case 1:
					if(!ioName.getText().toString().equals("") && !ioSurname.getText().toString().equals("") && !ioRank.getText().toString().equals("")
							&& !ioCellNo.getText().toString().equals("") && !foosName.getText().toString().equals("") && !foosSurname.getText().toString().equals("")
							&& !foosRank.getText().toString().equals("")){
						return true;
					}
					break;
				case 2:
					if(((!victimName.getText().toString().equals("") && !victimSurname.getText().toString().equals("") && !victimIDNo.getText().toString().equals(""))
						|| (victimName.getText().toString().equals("") && victimSurname.getText().toString().equals("") && victimIDNo.getText().toString().equals("")))	
							&& (rgbMale.isChecked() || rgbFemale.isChecked() ||rgbUnknownGender.isChecked())
							&& (rgbAsian.isChecked() || rgbBlack.isChecked() || rgbColoured.isChecked()
								|| rgbWhite.isChecked() || rgbUnknownRace.isChecked())){

						return true;
					}
					break;
				case 3:
					if(!whoFoundVictimBody.getText().toString().equals(""))
					{
						return true;
					}
					break;
				case 4:
					try{
						String sot = (String)sceneOType.getSelectedItem();

						if(!sot.toLowerCase().equals("other"))
						{
							return true;
						}else if(sot.toLowerCase().equals("other")){
							if(!sceneOTypeOther.getText().toString().equals(""))
							{
								return true;
							}
						}

					}catch(Exception ex){
						ex.printStackTrace();
					}
					break;
				case 5:
					if(!aircraftNumPeople.getText().toString().equals("") && !generalHistory.getText().toString().equals("")){
						return true;
					}
					break;
				case 6:
					return true;
			}
		}catch(Exception e){e.printStackTrace();}
		return false;
	}

	private List<NameValuePair> getPostData(){

		List<NameValuePair> pairs = new ArrayList<NameValuePair>();  

        pairs.add(new BasicNameValuePair("rquest","addCase"));
        pairs.add(new BasicNameValuePair("category","aviation"));
        
        return pairs;
	}

	
	private String getVictimGender(){
		try{
			
			
			if(rgbMale.isChecked())
			{
				return "Male";
			}else if(rgbFemale.isChecked())
			{
				return "Female";
			}else if(rgbUnknownGender.isChecked())
			{
				return "Unknown";
			}
		}catch(Exception e){
			e.printStackTrace();
		}
		return "Unknown";
	}
	
	private String getVictimRace(){
		try{
			
			
			if(rgbAsian.isChecked())
			{
				return "Asian";
			}else if(rgbBlack.isChecked())
			{
				return "Black";
			}else if(rgbColoured.isChecked())
			{
				return "Coloured";
			}else if(rgbWhite.isChecked())
			{
				return "White";
			}else if(rgbUnknownRace.isChecked())
			{
				return "Unknown";
			}
		}catch(Exception e){
			e.printStackTrace();
		}
		return "Unknown";
	}
	
	private void knownVictim(){
		try{
			if(victimName.getText().toString().equals(""))
			{
				victimName.setText("Unknown");
				victimSurname.setText("Unknown");
				victimIDNo.setText("Unknown");
			}
		}catch(Exception e){
			e.printStackTrace();
		}
	}

	private void saveDataOnAction() throws Exception{
        JSONObject obj = new JSONObject();
        JSONArray array = new JSONArray();
        JSONObject info = new JSONObject();
        JSONArray vicArray = new JSONArray();
        JSONObject victims = new JSONObject();
        
        
        info.accumulate("FOPersonelNumber", username);
        info.accumulate("sceneTime", time);
        info.accumulate("sceneDate", date);
        info.accumulate("sceneLocation", location);
        info.accumulate("sceneTemparature", temperature);
        
        array.put(info);
        obj.accumulate("object", array);
        currentDataSaved = obj;
        
	}
	private void saveData(JSONObject data) throws Exception{
		
		System.out.println("SAVED: "+data.toString());
		
	}
	
	private void resendData() throws Exception{
		
	}
	
	public JSONObject request(String url, List<NameValuePair> request)
            throws ClientProtocolException, IOException, IllegalStateException,
            JSONException {

        	DefaultHttpClient client = (DefaultHttpClient) com.example.mobileforensics.helpers.WebServiceWrapper.getNewHttpClient();
            HttpPost post = new HttpPost(url);
            
            UrlEncodedFormEntity entity = new UrlEncodedFormEntity(request,HTTP.UTF_8);
            post.setEntity(entity);
            
            HttpResponse response = client.execute(post);
            
            Scanner in = new Scanner(response.getEntity().getContent());
            String line ="";
            
            while(in.hasNextLine()){
            	line += in.nextLine();
            }
            
            JSONObject tmp = new JSONObject(line);
            in.close();
            return tmp;
    }
}
