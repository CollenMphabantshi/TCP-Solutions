package com.banchi.googlemapsv2;

import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Locale;

import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;
import org.xmlpull.v1.XmlPullParserFactory;

import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.GooglePlayServicesUtil;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.MapFragment;
import com.google.android.gms.maps.GoogleMap.OnMyLocationChangeListener;

import android.app.Activity;
import android.app.Dialog;
import android.app.Fragment;
import android.content.Context;
import android.location.Address;
import android.location.Geocoder;
import android.location.Location;
import android.location.LocationManager;
import android.os.Bundle;
import android.text.format.Time;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.Toast;

public class locate extends Activity  implements OnMyLocationChangeListener{
	Button next;
	GoogleMap map;
	private double longitude;
	private double latitude;
	
	private int status;
	private String time;
	private String date;
	private Context con;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		setContentView(R.layout.locate);
		
		status = GooglePlayServicesUtil.isGooglePlayServicesAvailable(getBaseContext());
		
		next = (Button) findViewById(R.id.nextButton);
		
		
		next.setOnClickListener(new View.OnClickListener() {
			
			@Override
			public void onClick(View arg0) {
				 //TODO Auto-generated method stub
				initialize();
			}
		});
	}
	
	
	public void initialize(){
		
		if( status != ConnectionResult.SUCCESS){
			int requestCode = 10;
			Dialog dialog = GooglePlayServicesUtil.getErrorDialog(status, this, requestCode);
			dialog.show();
		}else{
			
			map = ((MapFragment) getFragmentManager().findFragmentById(R.id.fragId)).getMap();
			map.setMyLocationEnabled(true);
			map.setOnMyLocationChangeListener(this);
			
		}
		
	}


	@Override
	public void onMyLocationChange(Location loc) {
		// TODO Auto-generated method stub
		longitude = loc.getLongitude();
		latitude = loc.getLatitude();
		Calendar c = Calendar.getInstance();
		String temperature = null ;
        System.out.println("Current time => "+c.getTime());
        try {
			temperature = find_Location(getBaseContext());
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (XmlPullParserException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
        SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        String formattedDate = df.format(c.getTime());
		
		String Text = "My current location is: " +
		        "Latitud = " + latitude +
		        "\nLongitud = " + longitude+
		        "\nTime = "+loc.getTime()+
		        "\nBearing = "+loc.getBearing()+
		        "\nAltitude = "+loc.getAltitude()+
		        "\nAccuracy = "+loc.getAccuracy()+
		        "\nDate = "+formattedDate+
		        "\nTemperature = "+ temperature;
		        

		        Toast.makeText( getApplicationContext(), Text, Toast.LENGTH_SHORT).show();
		
		
	}
	
	public String find_Location(Context con) throws IOException, XmlPullParserException
    {
               String addr=ConvertPointToLocation(latitude,longitude);
                String temp_c=SendToUrl(addr);
				return temp_c;

    }

    public String ConvertPointToLocation(double pointlat,double pointlog) {

        String address = "";
        Geocoder geoCoder = new Geocoder(con,Locale.getDefault());
        try {
            List<Address> addresses = geoCoder.getFromLocation(pointlat,pointlog, 1);
            if (addresses.size() > 0) {
                for (int index = 0; index < addresses.get(0)
                        .getMaxAddressLineIndex(); index++)
                    address += addresses.get(0).getAddressLine(index) + " ";
            }
        }
        catch (IOException e) {
            e.printStackTrace();
        }
        return address;
    }  

    private String  SendToUrl(String string) throws IOException, XmlPullParserException {
        // TODO Auto-generated method stub

          try{
              string=string.replace(" ","%20");

        String queryString="http://api.wunderground.com/auto/wui/geo/WXCurrentObXML/index.xml?query="+string;
        URL url = new URL(queryString);

        URLConnection conec = url.openConnection();
        InputStream stream = conec.getInputStream();
        XmlPullParser xpp = XmlPullParserFactory.newInstance().newPullParser();
        xpp.setInput(stream, null);
        int eventType = xpp.getEventType();
        while(eventType != XmlPullParser.END_DOCUMENT)
        {
              if(eventType == XmlPullParser.START_TAG)
		            {
            	  String elementName = xpp.getName();
		                  if("temp_c".equals(elementName))
		                    {
		                               int acount=xpp.getAttributeCount();
		                               String str="";
		                   for(int x=0;x<acount;x++) 
					            {
					                	   xpp.getAttributeValue(x);          
					                        str+=xpp.getAttributeValue(x);
					                     
					            }  
		                   return str;
		                    }
		            }
              eventType = xpp.next();
        	}
          }finally{}
		return "it works";
    }
}
