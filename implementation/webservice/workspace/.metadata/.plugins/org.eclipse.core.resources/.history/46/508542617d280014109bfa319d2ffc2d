package com.example.mobileforensics;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.ArrayList;

import java.util.Calendar;

import java.util.Date;

import java.util.List;
import java.util.Locale;
import java.util.Random;
import java.util.Scanner;

import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.protocol.HTTP;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;



import com.example.mobileforensics.R;
import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.GooglePlayServicesUtil;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.MapFragment;
import com.google.android.gms.maps.GoogleMap.OnMyLocationChangeListener;

import android.app.Activity;
import android.app.Dialog;
import android.app.ProgressDialog;
import android.content.Intent;
import android.database.Cursor;
import android.graphics.BitmapFactory;
import android.location.Address;
import android.location.Geocoder;
import android.location.Location;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.provider.MediaStore;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.Button;
import android.widget.EditText;
import android.widget.GridLayout;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RadioButton;
import android.widget.RelativeLayout;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

public class Blunt extends Activity implements GlobalMethods, OnMyLocationChangeListener{
	
	Button next;
	
	TextView value;

	private LinearLayout infoLayout;
	private LinearLayout demographicsLayout;
	private GridLayout theBodyLayout;
	private GridLayout sceneOfInjuryLayout;
	private GridLayout sceneLookLayout;
	private GridLayout theSceneLayout;
	private LinearLayout galleryLayout;
	
	private TextView tv_ioName;
	private EditText ioName;
	private TextView tv_ioSurname;
	private EditText ioSurname;
	private TextView tv_ioRank;
	private EditText ioRank;
	private TextView tv_ioCellNo;
	private EditText ioCellNo;
	
	private TextView tv_foosName;
	private EditText foosName;
	private TextView tv_foosSurname;
	private EditText foosSurname;
	private TextView tv_foosRank;
	private EditText foosRank;
	
	private TextView tv_victimName;
	private EditText victimName;
	private TextView tv_victimSurname;
	private EditText victimSurname;
	private TextView tv_victimIDNo;
	private EditText victimIDNo;
	
	private TextView tv_victimInfo;
	private TextView tv_victimRace;
	private TextView tv_victimGender;
	private TextView tv_foos;
	private TextView tv_io;
	
	
	private RadioButton rgbMale;
	private RadioButton rgbFemale;
	private RadioButton rgbUnknownGender;
	
	private RadioButton rgbAsian;
	private RadioButton rgbBlack;
	private RadioButton rgbColoured;
	private RadioButton rgbWhite;
	private RadioButton rgbUnknownRace;

	private TextView theBody;
	private TextView tv_bodyDecomposed;
	private RadioButton bodyDecomposedYes;
	private RadioButton bodyDecomposedNo;
	private TextView tv_medicalIntervention;
	private RadioButton medicalInterventionYes;
	private RadioButton medicalInterventionNo;
	private TextView tv_whoFoundVictimBody;
	private EditText whoFoundVictimBody;
	private TextView tv_closeToWater;
	private RadioButton closeToWaterYes;
	private RadioButton closeToWaterNo;
	private TextView tv_rapeHomicide;
	private RadioButton rapeHomicideYes;
	private RadioButton rapeHomicideNo;
	private TextView tv_suicideSuspected;
	private RadioButton suicideSuspectedYes;
	private RadioButton suicideSuspectedNo;
	private TextView tv_previousAttempts;
	private RadioButton previousAttemptsYes;
	private RadioButton previousAttemptsNo;
	private TextView tv_howManyAttempts;
	private EditText howManyAttempts;
	
	private TextView sceneOfInjury;
	private TextView tv_sceneIOType;
	private RadioButton sceneIOTypeInside;
	private RadioButton sceneIOTypeOutside;
	private TextView tv_whereInside;
	private Spinner sceneIType;
	private TextView tv_sceneITypeOther;
	private EditText sceneITypeOther;
	private TextView tv_doorLocked;
	private RadioButton doorLockedYes;
	private RadioButton doorLockedNo;
	private TextView tv_windowsClosed;
	private RadioButton windowsClosedYes;
	private RadioButton windowsClosedNo;
	private TextView tv_windowsBroken;
	private RadioButton windowsBrokenYes;
	private RadioButton windowsBrokenNo;
	private TextView tv_victimAlone;
	private RadioButton victimAloneYes;
	private RadioButton victimAloneNo;
	private TextView tv_peopleWithVictim;
	private EditText peopleWithVictim;
	private TextView tv_sceneOType;
	private Spinner sceneOType;
	private TextView tv_sceneOTypeOther;
	private EditText sceneOTypeOther;
	
	private TextView sceneLook;
	private TextView tv_signsOfStruggle;
	private RadioButton signsOfStruggleYes;
	private RadioButton signsOfStruggleNo;
	private TextView tv_alcoholBottleAround;
	private RadioButton alcoholBottleAroundYes;
	private RadioButton alcoholBottleAroundNo;
	private TextView tv_drugParaphernalia;
	private RadioButton drugParaphernaliaYes;
	private RadioButton drugParaphernaliaNo;
	
	private TextView theScene;
	private TextView tv_communityAssault;
	private RadioButton communityAssaultYes;
	private RadioButton communityAssaultNo;
	private TextView tv_bluntObjectUsed;
	private EditText bluntObjectUsed;
	private TextView tv_bluntForceObjectOnScene;
	private RadioButton bluntForceObjectOnSceneYes;
	private RadioButton bluntForceObjectOnSceneNo;
	private TextView tv_strangulationSuspected;
	private RadioButton strangulationSuspectedYes;
	private RadioButton strangulationSuspectedNo;
	private TextView tv_smotheringSuspected;
	private RadioButton smotheringSuspectedYes;
	private RadioButton smotheringSuspectedNo;
	private TextView tv_chockingSuspected;
	private RadioButton chockingSuspectedYes;
	private RadioButton chockingSuspectedNo;
	private TextView tv_suicideNoteFound;
	private RadioButton suicideNoteFoundYes;
	private RadioButton suicideNoteFoundNo;
	private TextView tv_generalHistory;
	private EditText generalHistory;
	
	private TextView response;
	private Button nextButton;
	private Button doneButton;
	private Button logoutButton;
	
	private JSONObject json;

	
	private final static int PAGES = 6;

	private final static int VISIBLE = View.VISIBLE;
	private final static int INVISIBLE = View.INVISIBLE;
	private final static int GONE = View.GONE;
	private int pageCount;
	
	private String username;
	private String time;
	private String date;
	private String location;
	private String temperature;
	private JSONObject currentDataSaved;
	
	GoogleMap map;
	private JSONObject locate;
	private double longitude;
	private double latitude;
	private int status;
	private String myAddress;
	private String Text;
	
	Button geolocation;
	
	//upload image parameters still to be arranged
	TextView messageText;
    Button uploadButton,selectImages,buttonLoadImage;
    ImageView imageView0,imageView1,imageView2,imageView3,imageView4,imageView5,imageView6,imageView7,imageView8;
    int serverResponseCode = 0;
    ProgressDialog dialog = null;
    Uri currImageURI;
    String  upLoadServerUri = "http://forensicsapp.co.za/webapp/images/images.php";
    private static int RESULT_LOAD_IMAGE = 1;
    int count = 0;
    ArrayList<String> uploadFileName = new ArrayList<String>();
    String filename ;
	
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		setContentView(R.layout.blunt);
		
		
		status = GooglePlayServicesUtil.isGooglePlayServicesAvailable(getBaseContext());
		
		
		
		//initialize();
		System.out.println("Start init");
		variablesInitialization();
		setOnClickEvents();
		
		//hidePage();
		//showPage();
		//showHideButtons();
	}
	
	public String initialize(){
			
			if( status != ConnectionResult.SUCCESS){
				int requestCode = 10;
				Dialog dialog = GooglePlayServicesUtil.getErrorDialog(status, this, requestCode);
				dialog.show();
			}else{
				
				map = ((MapFragment) getFragmentManager().findFragmentById(R.id.fragId)).getMap();
				map.setMyLocationEnabled(true);
				map.setOnMyLocationChangeListener(this);
				
			}
			return location;
			
		}
	
	@Override
	public void onMyLocationChange(Location loc) {
		// TODO Auto-generated method stub
		
		locate = new JSONObject();
		JSONObject object = new JSONObject();
		//get geolactions, time and date
		longitude = loc.getLongitude();
		latitude = loc.getLatitude();
		Calendar c = Calendar.getInstance();
        SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        String formattedDate = df.format(c.getTime());
        /*time = formattedDate.substring(11);
        date = formattedDate.substring(0,11);
		temperature = "23 C";*/
        getAddress(longitude,latitude);
        
        try {
			locate.accumulate("Longitude", longitude);
			locate.accumulate("Latitude", latitude);
			locate.accumulate("Bearing", loc.getBearing());
			locate.accumulate("Altitude", loc.getAltitude());
			locate.accumulate("Accuracy", loc.getAccuracy());
			locate.accumulate("Address", myAddress);
			
			object.accumulate("Time", time);
			object.accumulate("Date", date);
			object.accumulate("Location", locate.toString());
			object.accumulate("Temperature", temperature);
			
			location = object.toString();

			value.setText(location);
			
		} catch (JSONException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	public void getAddress(double longi, double lati){
		
		 Geocoder geocoder = new Geocoder(this, Locale.ENGLISH);

	       try {
	  List<Address> addresses = geocoder.getFromLocation(lati, longi, 1);
	 
	  if(addresses != null) {
	   Address returnedAddress = addresses.get(0);
	   StringBuilder strReturnedAddress = new StringBuilder("Address:\n");
	   for(int i=0; i<returnedAddress.getMaxAddressLineIndex(); i++) {
	    strReturnedAddress.append(returnedAddress.getAddressLine(i)).append("\n");
	   }
	   myAddress = strReturnedAddress.toString();
	  }
	  else{
	   myAddress = "No Address returned!";
	  }
	 } catch (IOException e) {
		  // TODO Auto-generated catch block
		  e.printStackTrace();
		  myAddress = "Cannot get Address!";
	 }
	}

	private void variablesInitialization(){
		pageCount = 1;
		username = "p33333333";
		try{
		
		time = (new Random().nextLong())+"";
	    date = "2014-10-10";
		temperature = "23 C";
		location = (new Random().nextLong())+","+(new Random().nextLong());
		geolocation = (Button) findViewById(R.id.geolocation);
		infoLayout = (LinearLayout)findViewById(R.id.blunt_infoLayout);
		demographicsLayout = (LinearLayout)findViewById(R.id.blunt_demographicLayout);
		theBodyLayout = (GridLayout)findViewById(R.id.blunt_theBodyLayout);
		sceneOfInjuryLayout = (GridLayout)findViewById(R.id.blunt_sceneOfInjuryLayout);
		sceneLookLayout = (GridLayout)findViewById(R.id.blunt_sceneLookLayout);
		theSceneLayout = (GridLayout)findViewById(R.id.blunt_theSceneLayout);
		galleryLayout = (LinearLayout)findViewById(R.id.blunt_galleryLayout);
		
		tv_ioName = (TextView)findViewById(R.id.blunt_tv_io_name);
		ioName = (EditText)findViewById(R.id.blunt_io_name);
		tv_ioSurname = (TextView)findViewById(R.id.blunt_tv_io_surname);
		ioSurname = (EditText)findViewById(R.id.blunt_io_surname);
		tv_ioRank = (TextView)findViewById(R.id.blunt_tv_io_rank);
		ioRank = (EditText)findViewById(R.id.blunt_io_rank);
		tv_ioCellNo = (TextView)findViewById(R.id.blunt_tv_io_cell);
		ioCellNo = (EditText)findViewById(R.id.blunt_io_cell);
		
		tv_foosName = (TextView)findViewById(R.id.blunt_tv_foos_name);
		foosName = (EditText)findViewById(R.id.blunt_foos_name);
		tv_foosSurname = (TextView)findViewById(R.id.blunt_tv_foos_surname);
		foosSurname = (EditText)findViewById(R.id.blunt_foos_surname);
		tv_foosRank = (TextView)findViewById(R.id.blunt_tv_foos_rank);
		foosRank = (EditText)findViewById(R.id.blunt_foos_rank);
		
		tv_io = (TextView)findViewById(R.id.blunt_tv_io);
		tv_foos = (TextView)findViewById(R.id.blunt_tv_foos);
		tv_victimInfo = (TextView)findViewById(R.id.blunt_tv_victimInfo);
		tv_victimRace = (TextView)findViewById(R.id.blunt_tv_victimRace);
		tv_victimGender = (TextView)findViewById(R.id.blunt_tv_victimGender);
		
		tv_victimName = (TextView)findViewById(R.id.blunt_tv_victim_name);
		victimName = (EditText)findViewById(R.id.blunt_victim_name);
		tv_victimSurname = (TextView)findViewById(R.id.blunt_tv_victim_surname);
		victimSurname = (EditText)findViewById(R.id.blunt_victim_surname);
		tv_victimIDNo = (TextView)findViewById(R.id.blunt_tv_victim_id);
		victimIDNo = (EditText)findViewById(R.id.blunt_victim_id);
		
		rgbMale = (RadioButton)findViewById(R.id.blunt_rgbMale);
		rgbFemale = (RadioButton)findViewById(R.id.blunt_rgbFemale);
		rgbUnknownGender = (RadioButton)findViewById(R.id.blunt_rgbUnknownGender);
		
		rgbAsian = (RadioButton)findViewById(R.id.blunt_rgbAsian);
		rgbBlack = (RadioButton)findViewById(R.id.blunt_rgbBlack);
		rgbColoured = (RadioButton)findViewById(R.id.blunt_rgbColoured);
		rgbWhite = (RadioButton)findViewById(R.id.blunt_rgbWhite);
		rgbUnknownRace = (RadioButton)findViewById(R.id.blunt_rgbUnknownRace);
		
		
		theBody = (TextView)findViewById(R.id.blunt_tv_the_body);
		tv_bodyDecomposed = (TextView)findViewById(R.id.blunt_tv_bodyDecomposed);
		bodyDecomposedYes = (RadioButton)findViewById(R.id.blunt_bodyDecomposedYes);
		bodyDecomposedNo = (RadioButton)findViewById(R.id.blunt_bodyDecomposedNo);
		tv_medicalIntervention = (TextView)findViewById(R.id.blunt_tv_medicalIntervention);
		medicalInterventionYes = (RadioButton)findViewById(R.id.blunt_medicalInterventionYes);
		medicalInterventionNo = (RadioButton)findViewById(R.id.blunt_medicalInterventionNo);
		tv_whoFoundVictimBody = (TextView)findViewById(R.id.blunt_tv_whoFoundVictimBody);
		whoFoundVictimBody = (EditText)findViewById(R.id.blunt_whoFoundVictimBody);
		tv_closeToWater = (TextView)findViewById(R.id.blunt_tv_closeToWater);
		closeToWaterYes = (RadioButton)findViewById(R.id.blunt_closeToWaterYes);
		closeToWaterNo = (RadioButton)findViewById(R.id.blunt_closeToWaterNo);
		tv_rapeHomicide = (TextView)findViewById(R.id.blunt_tv_rapeHomicide);
		rapeHomicideYes = (RadioButton)findViewById(R.id.blunt_rapeHomicideYes);
		rapeHomicideNo = (RadioButton)findViewById(R.id.blunt_rapeHomicideNo);
		tv_suicideSuspected = (TextView)findViewById(R.id.blunt_tv_suicideSuspected);
		suicideSuspectedYes = (RadioButton)findViewById(R.id.blunt_suicideSuspectedYes);
		suicideSuspectedNo = (RadioButton)findViewById(R.id.blunt_suicideSuspectedNo);
		tv_previousAttempts = (TextView)findViewById(R.id.blunt_tv_previousAttempts);
		previousAttemptsYes = (RadioButton)findViewById(R.id.blunt_previousAttemptsYes);
		previousAttemptsNo = (RadioButton)findViewById(R.id.blunt_previousAttemptsNo);
		tv_howManyAttempts = (TextView)findViewById(R.id.blunt_tv_howManyAttempts);
		howManyAttempts = (EditText)findViewById(R.id.blunt_howManyAttempts);
		
		
		sceneOfInjury = (TextView)findViewById(R.id.blunt_sceneOfInjury);
		tv_sceneIOType = (TextView)findViewById(R.id.blunt_tv_sceneIOType);
		sceneIOTypeInside = (RadioButton)findViewById(R.id.blunt_SceneIOTypeInside);
		sceneIOTypeOutside = (RadioButton)findViewById(R.id.blunt_SceneIOTypeOutside);
		tv_whereInside = (TextView)findViewById(R.id.blunt_tv_whereInside);
		sceneIType = (Spinner)findViewById(R.id.blunt_sceneIType);
		tv_sceneITypeOther = (TextView)findViewById(R.id.blunt_tv_sceneITypeOther);
		sceneITypeOther = (EditText)findViewById(R.id.blunt_sceneITypeOther);
		tv_doorLocked = (TextView)findViewById(R.id.blunt_tv_doorLocked);
		doorLockedYes = (RadioButton)findViewById(R.id.blunt_DoorLockedYes);
		doorLockedNo = (RadioButton)findViewById(R.id.blunt_DoorLockedNo);
		tv_windowsClosed = (TextView)findViewById(R.id.blunt_tv_windowsClosed);
		windowsClosedYes = (RadioButton)findViewById(R.id.blunt_WindowsClosedYes);
		windowsClosedNo = (RadioButton)findViewById(R.id.blunt_WindowsClosedNo);
		tv_windowsBroken = (TextView)findViewById(R.id.blunt_tv_windowsBroken);
		windowsBrokenYes = (RadioButton)findViewById(R.id.blunt_WindowsBrokenYes);
		windowsBrokenNo = (RadioButton)findViewById(R.id.blunt_WindowsBrokenNo);
		tv_victimAlone = (TextView)findViewById(R.id.blunt_tv_victimAlone);
		victimAloneYes = (RadioButton)findViewById(R.id.blunt_VictimAloneYes);
		victimAloneNo = (RadioButton)findViewById(R.id.blunt_VictimAloneNo);
		tv_peopleWithVictim = (TextView)findViewById(R.id.blunt_tv_peopleWithVictim);
		peopleWithVictim = (EditText)findViewById(R.id.blunt_peopleWithVictim);
		tv_sceneOType = (TextView)findViewById(R.id.blunt_tv_sceneOType);
		sceneOType = (Spinner)findViewById(R.id.blunt_sceneOType);
		tv_sceneOTypeOther = (TextView)findViewById(R.id.blunt_tv_sceneOTypeOther);
		sceneOTypeOther = (EditText)findViewById(R.id.blunt_sceneOTypeOther);
		
		System.out.println("after page 3");
		sceneLook = (TextView)findViewById(R.id.blunt_sceneLook);
		tv_signsOfStruggle = (TextView)findViewById(R.id.blunt_tv_signsOfStruggle);
		signsOfStruggleYes = (RadioButton)findViewById(R.id.blunt_SignsOfStruggleYes);
		signsOfStruggleNo = (RadioButton)findViewById(R.id.blunt_SignsOfStruggleNo);
		tv_alcoholBottleAround = (TextView)findViewById(R.id.blunt_tv_alcoholBottleAround);
		alcoholBottleAroundYes = (RadioButton)findViewById(R.id.blunt_AlcoholBottleAroundYes);
		alcoholBottleAroundNo = (RadioButton)findViewById(R.id.blunt_AlcoholBottleAroundNo);
		tv_drugParaphernalia = (TextView)findViewById(R.id.blunt_tv_drugParaphernalia);
		drugParaphernaliaYes = (RadioButton)findViewById(R.id.blunt_DrugParaphernaliaYes);
		drugParaphernaliaNo = (RadioButton)findViewById(R.id.blunt_DrugParaphernaliaNo);
		
		
		theScene = (TextView)findViewById(R.id.blunt_theScene);
		tv_communityAssault = (TextView)findViewById(R.id.blunt_tv_communityAssault);
		communityAssaultYes = (RadioButton)findViewById(R.id.blunt_CommunityAssaultYes);
		communityAssaultNo = (RadioButton)findViewById(R.id.blunt_CommunityAssaultNo);
		tv_bluntObjectUsed = (TextView)findViewById(R.id.blunt_tv_bluntObjectUsed);
		bluntObjectUsed = (EditText)findViewById(R.id.blunt_bluntObjectUsed);
		tv_bluntForceObjectOnScene = (TextView)findViewById(R.id.blunt_tv_bluntForceObjectOnScene);
		bluntForceObjectOnSceneYes = (RadioButton)findViewById(R.id.blunt_BluntForceObjectOnSceneYes);
		bluntForceObjectOnSceneNo = (RadioButton)findViewById(R.id.blunt_BluntForceObjectOnSceneNo);
		tv_strangulationSuspected = (TextView)findViewById(R.id.blunt_tv_strangulationSuspected);
		strangulationSuspectedYes = (RadioButton)findViewById(R.id.blunt_StrangulationSuspectedYes);
		strangulationSuspectedNo = (RadioButton)findViewById(R.id.blunt_StrangulationSuspectedNo);
		tv_smotheringSuspected = (TextView)findViewById(R.id.blunt_tv_smotheringSuspected);
		smotheringSuspectedYes = (RadioButton)findViewById(R.id.blunt_SmotheringSuspectedYes);
		smotheringSuspectedNo = (RadioButton)findViewById(R.id.blunt_SmotheringSuspectedNo);
		tv_chockingSuspected = (TextView)findViewById(R.id.blunt_tv_chockingSuspected);
		chockingSuspectedYes = (RadioButton)findViewById(R.id.blunt_ChockingSuspectedYes);
		chockingSuspectedNo = (RadioButton)findViewById(R.id.blunt_ChockingSuspectedNo);
		tv_suicideNoteFound = (TextView)findViewById(R.id.blunt_tv_suicideNoteFound);
		suicideNoteFoundYes = (RadioButton)findViewById(R.id.blunt_SuicideNoteFoundYes);
		tv_generalHistory = (TextView)findViewById(R.id.blunt_tv_generalHistory);
		generalHistory = (EditText)findViewById(R.id.blunt_generalHistory);
		
		
		response = (TextView)findViewById(R.id.blunt_tv_response);
		nextButton = (Button)findViewById(R.id.blunt_nextButton);
		doneButton = (Button)findViewById(R.id.blunt_doneButton);
		logoutButton = (Button)findViewById(R.id.blunt_logoutButton);
		
		//next = (Button) findViewById(R.id.nextButton);
		value = (TextView) findViewById(R.id.value);
		
		//upload pictures part
			//uploadButton = (Button)findViewById(R.id.uploadButton);
	       messageText  = (TextView)findViewById(R.id.messageText);
	       buttonLoadImage = (Button) findViewById(R.id.buttonLoadPicture);
	       imageView0 = (ImageView) findViewById(R.id.imgView0);
	       imageView1 = (ImageView) findViewById(R.id.imgView1);
	       imageView2 = (ImageView) findViewById(R.id.imgView2);
	       imageView3 = (ImageView) findViewById(R.id.imgView3);
	       imageView4 = (ImageView) findViewById(R.id.imgView4);
	       imageView5 = (ImageView) findViewById(R.id.imgView5);
	       imageView6 = (ImageView) findViewById(R.id.imgView6);
	       imageView7 = (ImageView) findViewById(R.id.imgView7);
	       imageView8 = (ImageView) findViewById(R.id.imgView8);
		
		
		}catch(Exception e){
			e.printStackTrace();
		}
	}
	
	@Override
	protected void onPause() {
		// TODO Auto-generated method stub
		super.onPause();
	}
	
	public void setOnClickEvents(){
		
		geolocation.setOnClickListener(new View.OnClickListener() {
			
			@Override
			public void onClick(View arg0) {
				// TODO Auto-generated method stub
				initialize();
			}
		});
		
		doneButton.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View view) {
				// TODO Auto-generated method stub
				try{
					//submit data to the server
					List<NameValuePair> postdata = getPostData();
					if(postdata != null)
					{
						try{
							new Read().execute(postdata);
							
							dialog = ProgressDialog.show(Blunt.this, "", "Uploading file...", true);
			                 
			                new Thread(new Runnable() {
			                        public void run() {
			                             runOnUiThread(new Runnable() {
			                                    public void run() {
			                                        messageText.setText("uploading started.....");
			                                    }
			                                });                      
			                             for(int i=0; i < uploadFileName.size(); i++){
			                            	 filename = uploadFileName.get(i);
			                            	 uploadFile( filename );
			                            	 
			                             }                   
			                        }
			                      }).start(); 
						}catch(Exception e){
							e.printStackTrace();
						}
						
					}
					
					//nextButton.setVisibility(GONE);
					doneButton.setVisibility(GONE);
					logoutButton.setVisibility(VISIBLE);
				}catch(Exception e){e.printStackTrace();}
			}
		});
		
		buttonLoadImage.setOnClickListener(new View.OnClickListener() {
            
            @Override
            public void onClick(View arg0) {
                 
                Intent i = new Intent(
                        Intent.ACTION_PICK,
                        android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
                 
                startActivityForResult(i, RESULT_LOAD_IMAGE);
            }
        });
		
		logoutButton.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View view) {
				// TODO Auto-generated method stub
				List<NameValuePair> pairs = new ArrayList<NameValuePair>();  
				
		        pairs.add(new BasicNameValuePair("rquest","addCase"));
		        pairs.add(new BasicNameValuePair("category","blunt"));
		        pairs.add(new BasicNameValuePair("caseData",currentDataSaved.toString()));
		        new Read().execute(pairs);
			}
		});
		
		/**
		 * 	Spinner onclick event
		 */
		
		previousAttemptsYes.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View arg0) {
				// TODO Auto-generated method stub
				tv_howManyAttempts.setVisibility(VISIBLE);
				howManyAttempts.setVisibility(VISIBLE);
			}
		});
		previousAttemptsNo.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View arg0) {
				// TODO Auto-generated method stub
				tv_howManyAttempts.setVisibility(GONE);
				howManyAttempts.setVisibility(GONE);
			}
		});

		sceneIOTypeInside.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				tv_whereInside.setVisibility(VISIBLE);
				sceneIType.setVisibility(VISIBLE);
				tv_doorLocked.setVisibility(VISIBLE);
				doorLockedYes.setVisibility(VISIBLE);
				doorLockedNo.setVisibility(VISIBLE);
				tv_windowsClosed.setVisibility(VISIBLE);
				windowsClosedYes.setVisibility(VISIBLE);
				windowsClosedNo.setVisibility(VISIBLE);
				tv_windowsBroken.setVisibility(VISIBLE);
				windowsBrokenYes.setVisibility(VISIBLE);
				windowsBrokenNo.setVisibility(VISIBLE);
				tv_victimAlone.setVisibility(VISIBLE);
				victimAloneYes.setVisibility(VISIBLE);
				victimAloneNo.setVisibility(VISIBLE);
				
				tv_sceneOType.setVisibility(GONE);
				sceneOType.setVisibility(GONE);
				tv_sceneOTypeOther.setVisibility(GONE);
				sceneOTypeOther.setVisibility(GONE);
			}
		});
		sceneIOTypeOutside.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				tv_whereInside.setVisibility(GONE);
				sceneIType.setVisibility(GONE);
				tv_sceneITypeOther.setVisibility(GONE);
				sceneITypeOther.setVisibility(GONE);
				tv_doorLocked.setVisibility(GONE);
				doorLockedYes.setVisibility(GONE);
				doorLockedNo.setVisibility(GONE);
				tv_windowsClosed.setVisibility(GONE);
				windowsClosedYes.setVisibility(GONE);
				windowsClosedNo.setVisibility(GONE);
				tv_windowsBroken.setVisibility(GONE);
				windowsBrokenYes.setVisibility(GONE);
				windowsBrokenNo.setVisibility(GONE);
				tv_victimAlone.setVisibility(GONE);
				victimAloneYes.setVisibility(GONE);
				victimAloneNo.setVisibility(GONE);
				tv_peopleWithVictim.setVisibility(GONE);
				peopleWithVictim.setVisibility(GONE);
				
				tv_sceneOType.setVisibility(VISIBLE);
				sceneOType.setVisibility(VISIBLE);
			}
		});

		
		
		sceneIType.setOnItemSelectedListener(new OnItemSelectedListener() {
			
			@Override
			public void onItemSelected(AdapterView<?> av, View view, int index,
					long arg3) {
				// TODO Auto-generated method stub
				try{
					TextView s = (TextView)view;
					if(s != null)
					{
						String item = (String)s.getText().toString();
						if(item.toLowerCase().equals("other"))
						{
							tv_sceneITypeOther.setVisibility(VISIBLE);
							sceneITypeOther.setVisibility(VISIBLE);
						}else{
							tv_sceneITypeOther.setVisibility(GONE);
							sceneITypeOther.setVisibility(GONE);
						}
					}
				}catch(Exception e){e.printStackTrace();}
			}

			@Override
			public void onNothingSelected(AdapterView<?> arg0) {
				// TODO Auto-generated method stub
				
			}
		});
		
		victimAloneYes.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				tv_peopleWithVictim.setVisibility(GONE);
				peopleWithVictim.setVisibility(GONE);
			}
		});
		victimAloneNo.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				tv_peopleWithVictim.setVisibility(VISIBLE);
				peopleWithVictim.setVisibility(VISIBLE);
			}
		});


		
		
		sceneOType.setOnItemSelectedListener(new OnItemSelectedListener() {

			@Override
			public void onItemSelected(AdapterView<?> arg0, View view,
					int arg2, long arg3) {
				// TODO Auto-generated method stub
				try{
					TextView s = (TextView)view;
					if(s != null)
					{
						String item = (String)s.getText();
						if(item.toLowerCase().equals("other"))
						{
							tv_sceneOTypeOther.setVisibility(VISIBLE);
							sceneOTypeOther.setVisibility(VISIBLE);
						}else{
							tv_sceneOTypeOther.setVisibility(GONE);
							sceneOTypeOther.setVisibility(GONE);
						}
					}
				}catch(Exception e){e.printStackTrace();}
			}

			@Override
			public void onNothingSelected(AdapterView<?> arg0) {
				// TODO Auto-generated method stub
				
			}
		});
		
	}
	
	
	    
	    @Override
	    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
	        super.onActivityResult(requestCode, resultCode, data);
	         
	        if (requestCode == RESULT_LOAD_IMAGE && resultCode == RESULT_OK && null != data) {
	            Uri selectedImage = data.getData();
	            String[] filePathColumn = { MediaStore.Images.Media.DATA };
	 
	            Cursor cursor = getContentResolver().query(selectedImage,
	            filePathColumn, null, null, null);
	            cursor.moveToFirst();
	 
	            int columnIndex = cursor.getColumnIndex(filePathColumn[0]);
	            String picturePath = cursor.getString(columnIndex);
	            cursor.close();
	           
	            uploadFileName.add(picturePath);
	           // messageText.setText("Path : "+uploadFileName);
	            
	            if(count == 0){
	            	imageView0.setImageBitmap(BitmapFactory.decodeFile(picturePath));
	            }else if(count == 1){
	            	imageView1.setImageBitmap(BitmapFactory.decodeFile(picturePath));
	            }else if(count == 2){
	            	imageView2.setImageBitmap(BitmapFactory.decodeFile(picturePath));
	            }else if(count == 3){
	            	imageView3.setImageBitmap(BitmapFactory.decodeFile(picturePath));
	            }else if(count == 4){
	            	imageView4.setImageBitmap(BitmapFactory.decodeFile(picturePath));
	            }else if(count == 5){
	            	imageView5.setImageBitmap(BitmapFactory.decodeFile(picturePath));
	            }else if(count == 6){
	            	imageView6.setImageBitmap(BitmapFactory.decodeFile(picturePath));
	            }else if(count == 7){
	            	imageView7.setImageBitmap(BitmapFactory.decodeFile(picturePath));
	            }else if(count == 8){
	            	imageView8.setImageBitmap(BitmapFactory.decodeFile(picturePath));
	            }
	            count++;
	        }
	     
	     
	    }
	   
	   
	 
	    public int uploadFile(String sourceFileUri) {
	           
	           
	          String fileName = sourceFileUri;
	  
	          HttpURLConnection conn = null;
	          DataOutputStream dos = null;  
	          String lineEnd = "\r\n";
	          String twoHyphens = "--";
	          String boundary = "*****";
	          int bytesRead, bytesAvailable, bufferSize;
	          byte[] buffer;
	          int maxBufferSize = 1 * 1024 * 1024; 
	          File sourceFile = new File(sourceFileUri); 
	           
	          if (!sourceFile.isFile()) {
	               
	               dialog.dismiss(); 
	                
	               Log.e("uploadFile", "Source File not exist :" + filename);
	                
	               runOnUiThread(new Runnable() {
	                   public void run() {
	                       messageText.setText("Source File not exist :"+ filename);
	                   }
	               }); 
	                
	               return 0;
	            
	          }
	          else
	          {
	               try { 
	                    
	                     // open a URL connection to the Servlet
	                   FileInputStream fileInputStream = new FileInputStream(sourceFile);
	                   URL url = new URL(upLoadServerUri);
	                    
	                   // Open a HTTP  connection to  the URL
	                   conn = (HttpURLConnection) url.openConnection(); 
	                   conn.setDoInput(true); // Allow Inputs
	                   conn.setDoOutput(true); // Allow Outputs
	                   conn.setUseCaches(false); // Don't use a Cached Copy
	                   conn.setRequestMethod("POST");
	                   conn.setRequestProperty("Connection", "Keep-Alive");
	                   conn.setRequestProperty("ENCTYPE", "multipart/form-data");
	                   conn.setRequestProperty("Content-Type", "multipart/form-data;boundary=" + boundary);
	                   conn.setRequestProperty("uploaded_file", fileName); 
	                    
	                   dos = new DataOutputStream(conn.getOutputStream());
	          
	                   dos.writeBytes(twoHyphens + boundary + lineEnd); 
	                   dos.writeBytes("Content-Disposition: form-data; name= uploaded_file ;filename="+fileName+ lineEnd);
	                    
	                   dos.writeBytes(lineEnd);
	          
	                   // create a buffer of  maximum size
	                   bytesAvailable = fileInputStream.available(); 
	          
	                   bufferSize = Math.min(bytesAvailable, maxBufferSize);
	                   buffer = new byte[bufferSize];
	          
	                   // read file and write it into form...
	                   bytesRead = fileInputStream.read(buffer, 0, bufferSize);  
	                      
	                   while (bytesRead > 0) {
	                        
	                     dos.write(buffer, 0, bufferSize);
	                     bytesAvailable = fileInputStream.available();
	                     bufferSize = Math.min(bytesAvailable, maxBufferSize);
	                     bytesRead = fileInputStream.read(buffer, 0, bufferSize);   
	                      
	                    }
	          
	                   // send multipart form data necesssary after file data...
	                   dos.writeBytes(lineEnd);
	                   dos.writeBytes(twoHyphens + boundary + twoHyphens + lineEnd);
	          
	                   // Responses from the server (code and message)
	                   serverResponseCode = conn.getResponseCode();
	                   String serverResponseMessage = conn.getResponseMessage();
	                     
	                   Log.i("uploadFile", "HTTP Response is : "
	                           + serverResponseMessage + ": " + serverResponseCode);
	                    
	                   if(serverResponseCode == 200){
	                        
	                       runOnUiThread(new Runnable() {
	                            public void run() {
	                                 
	                                String msg = "File Upload Completed.\n\n See uploaded file here : \n\n"
	                                              +" http://forensicsapp.co.za/webapp/images/uploads/"
	                                              +filename;
	                                 
	                                messageText.setText(msg);
	                                Toast.makeText(Blunt.this, "File Upload Complete.", 
	                                             Toast.LENGTH_SHORT).show();
	                            }
	                        });                
	                   }    
	                    
	                   //close the streams //
	                   fileInputStream.close();
	                   dos.flush();
	                   dos.close();
	                     
	              } catch (MalformedURLException ex) {
	                   
	                  dialog.dismiss();  
	                  ex.printStackTrace();
	                   
	                  runOnUiThread(new Runnable() {
	                      public void run() {
	                          messageText.setText("MalformedURLException Exception : check script url.");
	                          Toast.makeText(Blunt.this, "MalformedURLException", 
	                                                              Toast.LENGTH_SHORT).show();
	                      }
	                  });
	                   
	                  Log.e("Upload file to server", "error: " + ex.getMessage(), ex);  
	              } catch (Exception e) {
	                   
	                  dialog.dismiss();  
	                  e.printStackTrace();
	                   
	                  runOnUiThread(new Runnable() {
	                      public void run() {
	                          messageText.setText("Got Exception : see logcat ");
	                          Toast.makeText(Blunt.this, "Got Exception : see logcat ", 
	                                  Toast.LENGTH_SHORT).show();
	                      }
	                  });
	                  Log.e("Upload file to server Exception", "Exception : "
	                                                   + e.getMessage(), e);  
	              }
	              dialog.dismiss();       
	              return serverResponseCode; 
	               
	           } // End else block 
	         }
	
	
	public List<NameValuePair> getPostData(){
		try{
			List<NameValuePair> pairs = new ArrayList<NameValuePair>();  
	
	        pairs.add(new BasicNameValuePair("rquest","addCase"));
	        pairs.add(new BasicNameValuePair("category","blunt"));
	        JSONObject obj = new JSONObject();
	        JSONArray array = new JSONArray();
	        JSONObject info = new JSONObject();
	        JSONArray vicArray = new JSONArray();
	        JSONObject victims = new JSONObject();
	        
	        
	        info.accumulate("FOPersonelNumber", username);
	        info.accumulate("sceneTime", time);
	        info.accumulate("sceneDate", date);
	        info.accumulate("sceneLocation", location);
	        info.accumulate("sceneTemparature", temperature);
	        info.accumulate("investigatingOfficerName", ioName.getText().toString());
	        info.accumulate("investigatingOfficerRank", ioRank.getText().toString());
	        info.accumulate("investigatingOfficerCellNo", ioCellNo.getText().toString());
	        info.accumulate("firstOfficerOnSceneName", foosName.getText().toString());
	        info.accumulate("firstOfficerOnSceneRank", foosRank.getText().toString());
	        knownVictim();
	        victims.accumulate("victimIdentityNumber", victimIDNo.getText().toString());
	        victims.accumulate("victimGender", getVictimGender());
	        victims.accumulate("victimRace", getVictimRace());
	        victims.accumulate("victimName", victimName.getText().toString());
	        victims.accumulate("victimSurname", victimSurname.getText().toString());
	        victims.accumulate("victimGeneralHistory", generalHistory.getText().toString());
	        victims.accumulate("scenePhoto", null);
	        //Toast.makeText(getApplicationContext(), bodyDecomposedYes.isChecked()+" checked", Toast.LENGTH_LONG);
	        if(bodyDecomposedYes.isChecked())
	        {
	        	victims.accumulate("bodyDecomposed", "Yes");
	        }else{
	        	victims.accumulate("bodyDecomposed", "No");
	        }
	        
	        if(medicalInterventionYes.isChecked())
	        {
	        	victims.accumulate("medicalIntervention", "yes");
	        }else{
	        	victims.accumulate("medicalIntervention", "no");
	        }
	        
	        victims.accumulate("bodyBurned", null);
	        victims.accumulate("bodyIntact", null);
	        victims.accumulate("whoFoundVictimBody", whoFoundVictimBody.getText().toString());
	        
	        if(closeToWaterYes.isChecked())
	        {
	        	victims.accumulate("victimFoundCloseToWater", "yes");
	        }else{
	        	victims.accumulate("victimFoundCloseToWater", "no");
	        }
	        
	        if(suicideSuspectedYes.isChecked())
	        {
	        	victims.accumulate("suicideSuspected", "yes");
	        }else{
	        	victims.accumulate("suicideSuspected", "no");
	        }
	        
	        if(suicideNoteFoundYes.isChecked())
	        {
	        	victims.accumulate("victimSuicideNoteFound", "yes");
	        }else{
	        	victims.accumulate("victimSuicideNoteFound", "no");
	        }
	        
	        if(previousAttemptsYes.isChecked())
	        {
	        	victims.accumulate("previousAttempts", "yes");
	        }else{
	        	victims.accumulate("previousAttempts", "no");
	        }
	        
	        
	        
	        victims.accumulate("numberOfPreviousAttempts", getAttempts());
	        if(rapeHomicideYes.isChecked())
	        {
	        	victims.accumulate("rapeHomicideSuspected", "yes");
	        }else{
	        	victims.accumulate("rapeHomicideSuspected", "no");
	        }
	        
	        if(sceneIOTypeInside.isChecked())
	        {
	        	victims.accumulate("victimInside", "yes");
		        victims.accumulate("victimOutside", "no");
	        }else{
	        	victims.accumulate("victimInside", "no");
		        victims.accumulate("victimOutside", "yes");
	        }
	        
	       
	       
	        vicArray.put(victims);
	        info.accumulate("victims", vicArray);
	        
	        info.accumulate("bluntIOType",getIOType() );
	        if(signsOfStruggleYes.isChecked())
	        {
	        	info.accumulate("signsOfStruggle", "yes");
	        }else{
	        	info.accumulate("signsOfStruggle", "no");
	        }
	        if(alcoholBottleAroundYes.isChecked())
	        {
	        	info.accumulate("alcoholBottleAround", "yes");
	        }else{
	        	info.accumulate("alcoholBottleAround", "no");
	        }
	        
	        if(drugParaphernaliaYes.isChecked())
	        {
	        	info.accumulate("drugParaphernalia", "yes");
	        }else{
	        	info.accumulate("drugParaphernalia", "no");
	        }
	        
	        if(strangulationSuspectedYes.isChecked())
	        {
	        	info.accumulate("strangulationSuspected", "yes");
	        }else{
	        	info.accumulate("strangulationSuspected", "no");
	        }
	        
	        if(smotheringSuspectedYes.isChecked())
	        {
	        	info.accumulate("smotheringSuspected", "yes");
	        }else{
	        	info.accumulate("smotheringSuspected", "no");
	        }
	        
	        if(chockingSuspectedYes.isChecked())
	        {
	        	info.accumulate("chockingSuspected", "yes");
	        }else{
	        	info.accumulate("chockingSuspected", "no");
	        }
	        
	        if(doorLockedYes.isChecked())
	        {
	        	info.accumulate("doorLocked", "yes");
	        }else{
	        	info.accumulate("doorLocked", "no");
	        }
	        
	        if(windowsClosedYes.isChecked())
	        {
	        	info.accumulate("windowsClosed", "yes");
	        }else{
	        	info.accumulate("windowsClosed", "no");
	        }
	        if(windowsBrokenYes.isChecked())
	        {
	        	info.accumulate("windowsBroken", "yes");
	        }else{
	        	info.accumulate("windowsBroken", "no");
	        }
	        if(victimAloneYes.isChecked())
	        {
	        	info.accumulate("victimAlone", "yes");
	        }else{
	        	info.accumulate("victimAlone", "no");
	        }
	        
	        
	        info.accumulate("peopleWithVictim", getPeopleWithVictim());
	        info.accumulate("bluntForceObjectSuspected", bluntObjectUsed.getText().toString());
	        if(bluntForceObjectOnSceneYes.isChecked())
	        {
	        	info.accumulate("bluntForceObjectStillOnScene", "yes");
	        }else{
	        	info.accumulate("bluntForceObjectStillOnScene", "no");
	        }
	        
	        if(communityAssaultYes.isChecked())
	        {
	        	info.accumulate("wasCommunityAssult", "yes");
	        }else{
	        	info.accumulate("wasCommunityAssult", "no");
	        }
	        
	        array.put(info);
	        obj.accumulate("object", array);
	        currentDataSaved = obj;
	        
	        pairs.add(new BasicNameValuePair("caseData",obj.toString()));
	        
	        return pairs;
		}catch(Exception e){
			e.printStackTrace();
			return null;
		}
	}
	
	public String getIOType(){
		try{
			String type = "";
			
			if(sceneIOTypeInside.isChecked())
			{
				type = (String)sceneIType.getSelectedItem();
				if(type.toLowerCase().equals("other")){
					type = sceneITypeOther.getText().toString();
				}
				return type;
			}else{
				type = (String)sceneOType.getSelectedItem();
				if(type.toLowerCase().equals("other")){
					type = sceneOTypeOther.getText().toString();
				}
				return type;
			}
		}catch(Exception e){
			e.printStackTrace();
		}
		return null;
	}
	
	public String getVictimGender(){
		try{
			
			
			if(rgbMale.isChecked())
			{
				return "Male";
			}else if(rgbFemale.isChecked())
			{
				return "Female";
			}else if(rgbUnknownGender.isChecked())
			{
				return "Unknown";
			}
		}catch(Exception e){
			e.printStackTrace();
		}
		return "Unknown";
	}
	
	public String getVictimRace(){
		try{
			
			
			if(rgbAsian.isChecked())
			{
				return "Asian";
			}else if(rgbBlack.isChecked())
			{
				return "Black";
			}else if(rgbColoured.isChecked())
			{
				return "Coloured";
			}else if(rgbWhite.isChecked())
			{
				return "White";
			}else if(rgbUnknownRace.isChecked())
			{
				return "Unknown";
			}
		}catch(Exception e){
			e.printStackTrace();
		}
		return "Unknown";
	}
	
	public void knownVictim(){
		try{
			if(victimName.getText().toString().equals(""))
			{
				victimName.setText("Unknown");
				victimSurname.setText("Unknown");
				victimIDNo.setText("Unknown");
			}
		}catch(Exception e){
			e.printStackTrace();
		}
	}
	
	public int getAttempts(){
		try{
			
			if(previousAttemptsYes.isChecked())
			{
				int attempts = Integer.parseInt(howManyAttempts.getText().toString());
				return attempts;
			}
		}catch(Exception e){
			e.printStackTrace();
		}
		return 0;
	}
	
	public String getPeopleWithVictim(){
		try{
			
			
			if(victimAloneNo.isChecked())
			{
				return peopleWithVictim.getText().toString();
			}else{
				
				return null;
			}
		}catch(Exception e){
			e.printStackTrace();
		}
		return null;
	}
	public void saveDataOnAction() throws Exception{
        JSONObject obj = new JSONObject();
        JSONArray array = new JSONArray();
        JSONObject info = new JSONObject();
        JSONArray vicArray = new JSONArray();
        JSONObject victims = new JSONObject();
        
    
        
        info.accumulate("FOPersonelNumber", username);
        info.accumulate("sceneTime", time);
        info.accumulate("sceneDate", date);
        info.accumulate("sceneLocation", location);
        info.accumulate("sceneTemparature", temperature);
        info.accumulate("investigatingOfficerName", ioName.getText().toString());
        info.accumulate("investigatingOfficerRank", ioRank.getText().toString());
        info.accumulate("investigatingOfficerCellNo", ioCellNo.getText().toString());
        info.accumulate("firstOfficerOnSceneName", foosName.getText().toString());
        info.accumulate("firstOfficerOnSceneRank", foosRank.getText().toString());
        knownVictim();
        victims.accumulate("victimIdentityNumber", victimIDNo.getText().toString());
        victims.accumulate("victimGender", getVictimGender());
        victims.accumulate("victimRace", getVictimRace());
        victims.accumulate("victimName", victimName.getText().toString());
        victims.accumulate("victimSurname", victimSurname.getText().toString());
        victims.accumulate("victimGeneralHistory", generalHistory.getText().toString());
        victims.accumulate("scenePhoto", null);
        if(bodyDecomposedYes.isChecked())
        {
        	victims.accumulate("bodyDecomposed", "Yes");
        }else{
        	victims.accumulate("bodyDecomposed", "No");
        }
        
        if(medicalInterventionYes.isChecked())
        {
        	victims.accumulate("medicalIntervention", "yes");
        }else{
        	victims.accumulate("medicalIntervention", "no");
        }
        
        victims.accumulate("bodyBurned", null);
        victims.accumulate("bodyIntact", null);
        victims.accumulate("whoFoundVictimBody", whoFoundVictimBody.getText().toString());
        
        if(closeToWaterYes.isChecked())
        {
        	victims.accumulate("victimFoundCloseToWater", "yes");
        }else{
        	victims.accumulate("victimFoundCloseToWater", "no");
        }
        
        if(suicideSuspectedYes.isChecked())
        {
        	victims.accumulate("suicideSuspected", "yes");
        }else{
        	victims.accumulate("suicideSuspected", "no");
        }
        
        if(suicideNoteFoundYes.isChecked())
        {
        	victims.accumulate("victimSuicideNoteFound", "yes");
        }else{
        	victims.accumulate("victimSuicideNoteFound", "no");
        }
        
        if(previousAttemptsYes.isChecked())
        {
        	victims.accumulate("previousAttempts", "yes");
        }else{
        	victims.accumulate("previousAttempts", "no");
        }
        
        
        
        victims.accumulate("numberOfPreviousAttempts", getAttempts());
        if(rapeHomicideYes.isChecked())
        {
        	victims.accumulate("rapeHomicideSuspected", "yes");
        }else{
        	victims.accumulate("rapeHomicideSuspected", "no");
        }
        
        if(sceneIOTypeInside.isChecked())
        {
        	victims.accumulate("victimInside", "yes");
	        victims.accumulate("victimOutside", "no");
        }else{
        	victims.accumulate("victimInside", "no");
	        victims.accumulate("victimOutside", "yes");
        }
        
       
       
        vicArray.put(victims);
        info.accumulate("victims", vicArray);
        
        info.accumulate("bluntIOType",getIOType() );
        if(signsOfStruggleYes.isChecked())
        {
        	info.accumulate("signsOfStruggle", "yes");
        }else{
        	info.accumulate("signsOfStruggle", "no");
        }
        if(alcoholBottleAroundYes.isChecked())
        {
        	info.accumulate("alcoholBottleAround", "yes");
        }else{
        	info.accumulate("alcoholBottleAround", "no");
        }
        
        if(drugParaphernaliaYes.isChecked())
        {
        	info.accumulate("drugParaphernalia", "yes");
        }else{
        	info.accumulate("drugParaphernalia", "no");
        }
        
        if(strangulationSuspectedYes.isChecked())
        {
        	info.accumulate("strangulationSuspected", "yes");
        }else{
        	info.accumulate("strangulationSuspected", "no");
        }
        
        if(smotheringSuspectedYes.isChecked())
        {
        	info.accumulate("smotheringSuspected", "yes");
        }else{
        	info.accumulate("smotheringSuspected", "no");
        }
        
        if(chockingSuspectedYes.isChecked())
        {
        	info.accumulate("chockingSuspected", "yes");
        }else{
        	info.accumulate("chockingSuspected", "no");
        }
        
        if(doorLockedYes.isChecked())
        {
        	info.accumulate("doorLocked", "yes");
        }else{
        	info.accumulate("doorLocked", "no");
        }
        
        if(windowsClosedYes.isChecked())
        {
        	info.accumulate("windowsClosed", "yes");
        }else{
        	info.accumulate("windowsClosed", "no");
        }
        if(windowsBrokenYes.isChecked())
        {
        	info.accumulate("windowsBroken", "yes");
        }else{
        	info.accumulate("windowsBroken", "no");
        }
        if(victimAloneYes.isChecked())
        {
        	info.accumulate("victimAlone", "yes");
        }else{
        	info.accumulate("victimAlone", "no");
        }
        
        
        info.accumulate("peopleWithVictim", getPeopleWithVictim());
        info.accumulate("bluntForceObjectSuspected", bluntObjectUsed.getText().toString());
        if(bluntForceObjectOnSceneYes.isChecked())
        {
        	info.accumulate("bluntForceObjectStillOnScene", "yes");
        }else{
        	info.accumulate("bluntForceObjectStillOnScene", "no");
        }
        
        if(communityAssaultYes.isChecked())
        {
        	info.accumulate("wasCommunityAssult", "yes");
        }else{
        	info.accumulate("wasCommunityAssult", "no");
        }
        
        array.put(info);
        obj.accumulate("object", array);
        currentDataSaved = obj;
        
	}
	public void saveData(JSONObject data) throws Exception{
		
		System.out.println("SAVED: "+data.toString());
		
	}
	
	public void resendData() throws Exception{
		
	}
	
	public JSONObject request(String url, List<NameValuePair> request)
            throws ClientProtocolException, IOException, IllegalStateException,
            JSONException {
		
        	DefaultHttpClient client = (DefaultHttpClient) WebServiceWrapper.getNewHttpClient();
            HttpPost post = new HttpPost(url);
            
            UrlEncodedFormEntity entity = new UrlEncodedFormEntity(request,HTTP.UTF_8);
            post.setEntity(entity);
            
            HttpResponse response = client.execute(post);
            
            Scanner in = new Scanner(response.getEntity().getContent());
            String line ="";
            
            while(in.hasNextLine()){
            	line += in.nextLine();
            }
            
            
            
            JSONObject tmp = new JSONObject(line);
            in.close();
            return tmp;
    }
    
    
    
    public class Read extends AsyncTask<List<NameValuePair>, Integer,JSONObject>{

		@Override
		protected JSONObject doInBackground(List<NameValuePair>... params) {
			// TODO Auto-generated method stub
			try {
				json = request(GlobalValues.WS_URL, params[0]);
			} catch (ClientProtocolException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IllegalStateException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (JSONException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			return json;
		}
		
		@Override
		protected void onPostExecute(JSONObject result) {
			// TODO Auto-generated method stub
			super.onPostExecute(result);
			try{
				if(result != null)
				{
					String status = result.getString("status");
					String message = result.getString("msg");
					System.out.println("STATUS: "+status);
					System.out.println("MESSAGE: "+message);
					response.setVisibility(VISIBLE);
					if(status.toLowerCase().equals("failed"))
					{
						response.setText(message);
						saveData(currentDataSaved);
					}else{
						response.setText(message);
					}
				}
			}catch(Exception e){
				
			}
		}
	
    }
    
    public class LoadMethods extends AsyncTask<String, Integer,Boolean>{

		@Override
		protected Boolean doInBackground(String... params) {
			boolean status = false; 
			try{
			// TODO Auto-generated method stub
			
				if(params[0] != null){
					
					return true;
				}
			
			}catch(Exception e){e.printStackTrace();}
			return status;
		}
		
		@Override
		protected void onPostExecute(Boolean result) {
			// TODO Auto-generated method stub
			super.onPostExecute(result);
			
		}
	
    }

	@Override
	public void hidePage() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void showPage() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public boolean validateNextPage() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public void showHideButtons() {
		// TODO Auto-generated method stub
		
	}

	

}
