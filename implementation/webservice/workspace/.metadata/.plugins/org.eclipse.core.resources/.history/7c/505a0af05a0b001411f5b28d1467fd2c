package com.banchi.collen;

import java.io.IOException;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import java.security.*;
import java.security.cert.CertificateException;

import javax.net.ssl.*;
import javax.security.cert.X509Certificate;

public class MySSLSocketFactory extends SSLSocketFactory{
	SSLContext sslContext = SSLContext.getInstance("TLS");

    public MySSLSocketFactory(KeyStore truststore)
                    throws NoSuchAlgorithmException, KeyManagementException,
                    KeyStoreException, UnrecoverableKeyException {
            super(truststore);

            TrustManager tm = new X509TrustManager() {
                    public void checkClientTrusted(X509Certificate[] chain,
                                    String authType) throws Exception {
                    }

                    public void checkServerTrusted(X509Certificate[] chain,
                                    String authType) throws Exception {
                    }

                    public X509Certificate[] getAcceptedIssuers() {
                            return null;
                    }

					@Override
					public void checkClientTrusted(
							java.security.cert.X509Certificate[] chain,
							String authType) throws CertificateException {
						// TODO Auto-generated method stub
						
						
					}

					@Override
					public void checkServerTrusted(
							java.security.cert.X509Certificate[] chain,
							String authType) throws CertificateException {
						// TODO Auto-generated method stub
						
					}
            };

            sslContext.init(null, new TrustManager[] { tm }, null);
    }

    @Override
    public Socket createSocket(Socket socket, String host, int port,
                    boolean autoClose) throws IOException, UnknownHostException {
            return sslContext.getSocketFactory().createSocket(socket, host, port,
                            autoClose);
    }

    @Override
    public Socket createSocket() throws IOException {
            return sslContext.getSocketFactory().createSocket();
    }

		
}
